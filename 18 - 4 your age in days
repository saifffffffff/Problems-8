#include <vector>
#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <ctime>
#include "Mylib.h"
#pragma warning (disable : 4996)

using namespace std;

struct stDate {
	short day;
	short month;
	short year;
};

bool IsLeapYear(short year) {
	return (year % 400 == 0) || (year % 100 != 0 && year % 4 == 0);
}
short NumberOfDaysInYear(short year) {
	return IsLeapYear(year) ? 366 : 365;
}
short NumberOfHoursInYear(short year) {
	return NumberOfDaysInYear(year) * 24;
}
int NumberOfMinutesInYear(short year) {
	return NumberOfHoursInYear(year) * 60.f;
}
int NumberOfSecondsInYear(short year) {
	return NumberOfMinutesInYear(year) * 60.f;
}


short NumberOfDaysInMonth(short month, short year) {

	//short MonthsWith31Day[] = {1,3,5,7,8,10,12};

	if (month > 12 || month < 1)
		return 0;
	short DaysInMonth[12] = { 31,28 ,31 ,30,31,30,31,31,30,31,30, 31 };

	return month == 2 ? (IsLeapYear(year) ? 29 : 28) : DaysInMonth[month - 1];

}
short NumberOfHoursInMonth(short month, short year) {

	return NumberOfDaysInMonth(month, year) * 24;

}
int NumberOfMinutesInMonth(short month, short year) {
	return NumberOfHoursInMonth(month, year) * 60;
}
int NumberOfSecondsInMonth(short month, short year) {
	return NumberOfMinutesInMonth(month, year) * 60;
}


short DayOfWeekOrder(short day, short month, short year) {

	short a = (14 - month) / 12;
	short y = year - a;
	short m = month + 12 * a - 2;
	short d = (int)(day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;

	return d;

}
string DayName(short DayOrder) {
	string days[] = { "sunday", "monday", "tuesday", "wednesday","thursday", "friday" , "saturday" };
	return days[DayOrder];
}
string DayShortName(short DayOrder) {
	string days[] = { "Sun", "Mon", "Tue", "Wed","Thu", "Fri" , "Sat" };
	return days[DayOrder];
}


string MonthShortName(short month) {
	string months[] = { "Jan", "Feb" ,"Mar" , "Apr" , "May", "Jun", "Jul", "Aug","Sep", "Oct", "Nov","Dec" };

	return months[month - 1 ];
}
void PrintMonthCalender(short month, short year) {

	short FirstDay = DayOfWeekOrder(1, month, year);
	short NumberOfDays = NumberOfDaysInMonth(month, year);

	printf("________________%s________________\n\n", MonthShortName(month).c_str());
	printf("  sun  mon  tue  wed  thu  fri  sat\n");
	int i;
	for (i = 0; i < FirstDay; i++)
		cout << "     ";
	
	for (int j = 1; j <= NumberOfDays; j++) {
		printf("%5d", j);
		
		if (++i == 7)
		{
			cout << endl;
			i = 0;
		}
	}
	printf("\n___________________________________\n");



}
void PrintYearCalender(short year) {
	cout << "___________________________________\n\n";
	cout << "            " << year << " - calender\n";
	cout << "___________________________________\n\n";
	for (short month = 1; month <= 12; month++) {
		PrintMonthCalender(month, year);
		cout << endl;
	}
}


short TotalDaysFromTheBegingOfYear(short day, short month, short year) {
	short TotalDays = 0;
	for (short m = 1; m < month; m++)
		TotalDays += NumberOfDaysInMonth(m, year);
	TotalDays += day;
	return TotalDays;
}
stDate GetDateFromDayOrderInWeek(short days, short year) {

	stDate Date;
	
	Date.year = year;
	Date.month = 1;
	short RemainingDays = days;
	
	short DaysInMonth;
	while (true) {
		DaysInMonth = NumberOfDaysInMonth(Date.month, year);
		if (RemainingDays> DaysInMonth) {
			
			RemainingDays -= DaysInMonth;
			Date.month++;
		
		}
		else {
			Date.day = RemainingDays;
			break;
		
		}
	}
	
	return Date;

}
void PrintDate(stDate Date){

	cout << Date.day << "/" << Date.month << "/" << Date.year << endl;

}
	
stDate AddDaysToDate(short days, stDate date) {

	int remainingDays = days + TotalDaysFromTheBegingOfYear(date.day, date.month, date.year);

	date.month = 1;
	short MonthDays;
	while (true) {

		MonthDays = NumberOfDaysInMonth(date.month, date.year);
		if (remainingDays < MonthDays) {
			date.day = remainingDays;
			break;
		}

		else {
			remainingDays -= MonthDays;
			date.month++;
			if (date.month > 12) {
				date.month = 1;
				date.year++;
			}

		}
	}
	return date;
}
stDate ReadDate() {
	stDate date;
	date.year = Read::ReadIntInRange(0, INT_MAX, "Enter year : ");
	date.month = Read::ReadIntInRange(1, 12,"Enter month : ");
	date.day = Read::ReadIntInRange(1, NumberOfDaysInMonth(date.month, date.year) , "Enter day : ");
	return date;
}
bool IsDate1_OlderThan_Date2(stDate date1, stDate date2) {
	return (date1.year < date2.year) ? true : ((date1.year == date2.year) ? ((date1.month < date2.month) ? true : ((date1.month == date2.month) ? ((date1.day < date2.day) ? true : false) : false)) : false);
}
bool IsDate1EqualsToDate2(stDate date1, stDate date2) {
	return (date1.year == date2.year) && (date1.month == date2.month) && (date1.day == date2.day);
}
bool IsLastDayInMonth(stDate date) {
	return date.day == NumberOfDaysInMonth(date.month, date.year) ? true : false;
}
bool IsLastMonthInYear(stDate date) {
	return (date.month == 12);
}
stDate IncreaseDateByOneDay1(stDate date) {
	if (IsLastDayInMonth(date))
	{
		if (IsLastMonthInYear(date))
		{
			date.year++;
			date.day = date.month = 1;
		}
		else {
			date.month++;
			date.day = 1;
		}
		
	}
	else {
		date.day++;
	}
	return date;
}
int GetDifferenceInDays(stDate date1, stDate date2, bool IncludeEndDay = false) {

	int days = 0;
	while (IsDate1_OlderThan_Date2(date1, date2)) {
		days++;
		date1 = IncreaseDateByOneDay1(date1);
	}
	return IncludeEndDay ? ++days : days;
}


// proble 18 - 4

stDate GetTodayDate() {
	
	long long t = time(0);
	tm* now = localtime(&t);
	
	stDate TodayDate;
	
	TodayDate.year = now->tm_year + 1900;
	TodayDate.month = now->tm_mon + 1;
	TodayDate.day = now->tm_mday;
	
	return TodayDate;
}



int main() {
	srand(time(0));
	cout << "Enter your age" << endl;
	stDate date = ReadDate();

	cout << "your age in days : \n";
	cout << GetDifferenceInDays(date, GetTodayDate());

	
	return 0;
}
